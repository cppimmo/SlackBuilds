#!/bin/bash

# Slackware build script for the Godot Engine

# Copyright 2023 Brian Hoffpauir, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=godot
VERSION=${VERSION:-4.1.1}
BUILD=${BUILD:-1}
TAG=${TAG:-_Brian}
PKGTYPE=${PKGTYPE:-tgz}
	  
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
  	i?86) ARCH=i586 ;;
	arm*) ARCH=arm ;;
	   *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""

  ARCH="x86_32" # Scons expects a slightly different form
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "aarch64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

# OPTIONS (see https://docs.godotengine.org/en/latest/contributing/development/compiling/compiling_for_linuxbsd.html)

PLATFORM=linuxbsd # Should remain linuxbsd
USE_UDEV=${UDEV:-no} # Use libudev
USE_LLVM=${USE_LLVM:-no} # Use clang instead of GCC
LINKER=${LINKER:-ldd} # Use a different linker (lld for Clang)
USE_LTO=${USE_LTO:-no} # Use link-time optimization (GCC only)
TARGET=${TARGET:-editor} # Editor target by default
# For use with template_release target:
PRODUCTION=${PRODUCTION:-no} # Make executable smaller and faster for production use
TEMPLATE_64=${TEMPLATE_64:-no}
TEMPLATE_32=${TEMPLATE_32:-no}
# Supply either doxygen, rst, or rstjs to build documentation
#DOC=doxygen | rst | rstjs

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION-stable.tar.gz
mv $PRGNAM-$VERSION-stable $PRGNAM-$VERSION # Remove suffix from source source download
cd $PRGNAM-$VERSION
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# TODO: Enable C#
# TODO: Support export template builds

# Perform build with given options
scons platform="$PLATFORM" \
	  target="$TARGET" \
	  arch="$ARCH" \
	  production="$PRODUCTION" \
	  udev="$USE_UDEV" \
	  use_llvm="$USE_LLVM" \
	  use_lto="$USE_LTO"

if [[ ${TEMPLATE_32,,} = "yes" ]]; then # Build linuxbsd 32bit export template
  scons platform="$PLATFORM" target=template_release arch=x86_32
  scons platform="$PLATFORM" target=template_debug arch=x86_32
fi

if [[ ${TEMPLATE_64,,} = "yes" ]]; then # Build linuxbsd 64bit export template
  scons platform="$PLATFORM" target=template_release arch=x86_64
  scons platform="$PLATFORM" target=template_debug arch=x86_64
fi

if [ -n "$DOC" ]; then # Only process when a non-empty 
  cd doc # Move into the documentation directory

  # Build multiple doc targets by splitting comma delimited string: doxygen,rst
  DELIMITED_DOCS=($(echo "$DOC" | tr ',' ' '))

  for target in "${DELIMITED_DOCS[@]}"; do
	make OUTPUTDIR=./_build "$target"
  done

  cd ..	# Move out once
fi

# Store however many binaries were produced in the build (should most likely be one)
mkdir -p $PKG/usr/local/bin
cp -a \
   $TMP/$PRGNAM-$VERSION/bin/* \
   $PKG/usr/bin

# Create a desktop icon entry
mkdir -p $PKG/usr/share/applications
DESKTOP_EXEC=$PRGNAM.$PLATFORM.$TARGET.$ARCH
DESKTOP_FILENAME=$PKG/usr/share/applications/godot.desktop

{
  echo "[Desktop Entry]"
  echo "Type=Application"
  echo "Name=Godot Engine"
  echo "Exec=$DESKTOP_EXEC"
  echo "Icon=godot"
} >> "$DESKTOP_FILENAME"

# Add the godot icon for use by the desktop entry
mkdir -p $PKG/usr/share/pixmaps/
install -m 644 $TMP/$PRGNAM-$VERSION/icon.png $PKG/usr/share/pixmaps/godot.png

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
# Copy each built documentation target
if [ -n "$DOC" ]; then
  # Move into the documentation directory
  cd doc
	
  for target in ${DELIMITED_DOCS[@]}; do
    cp -a \
	   ./_build/${target} \
	   $PKG/usr/doc/$PRGNAM-$VERSION
  done

  cd ..	# Move out once
fi
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
